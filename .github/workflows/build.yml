name: "Build"

on:
  push:
    branches:
      - main
      - develop
      - issues/**

jobs:
  init:
    name: "Init"
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}
    steps:
      - uses: actions/checkout@v2
        id: checkout
      - name: Extract branch name
        id: extract_branch
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"

      - name: "Source cache"
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/**
          key: ${{ runner.os }}-sources-${{ github.run_id }}

      - name: "get fossa"
        run: |
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh > install.sh
          sudo bash install.sh -b .
      - name: init gradle
        if: steps.gradle-cache.outputs.cache-hit != 'true'
        run: ./gradlew --no-daemon

  staticDetektCheck:
    name: "Detekt - static check"
    runs-on: ubuntu-latest
    needs: init
    steps:
      - name: "Load sources"
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/**
          key: ${{ runner.os }}-sources-${{ github.run_id }}

      - name: "Detekt"
        uses: burrunan/gradle-cache-action@v1
        with:
          arguments: |
            detekt

      - name: "Upload detekt report"
        uses: actions/upload-artifact@v2
        with:
          name: Detekt report
          path: build/reports/detekt

  staticFossaCheck:
    name: "Fossa licence analyze - static check"
    runs-on: ubuntu-latest
    needs: init
    steps:
      - name: "Load sources"
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/**
          key: ${{ runner.os }}-sources-${{ github.run_id }}

      - name: "Fossa analyze"
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
        run: ${{ github.workspace }}/fossa analyze --branch ${{ needs.init.outputs.branch }}

  compile:
    runs-on: ubuntu-latest
    needs: init
    steps:
      - name: "Load sources"
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/**
          key: ${{ runner.os }}-sources-${{ github.run_id }}

      - uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/**
          key: ${{ runner.os }}-compile-${{ github.run_id }}

      - name: "Compile"
        uses: burrunan/gradle-cache-action@v1
        with:
          arguments: |
            classes

  unitTest:
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - name: "Load compile cache"
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/**
          key: ${{ runner.os }}-compile-${{ github.run_id }}

      - name: "Unit test cache"
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/**
          key: ${{ runner.os }}-test-${{ github.run_id }}

      - name: "Unit test"
        uses: burrunan/gradle-cache-action@v1
        with:
          arguments: |
            test
            jacocoTestReport
#        run: ${{ github.workspace }}/gradlew test jacocoTestReport --no-daemon

      - name: "Publish Unit Test Results"
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          check_name: "Unit test results"
          files: test-results/**/*.xml

      - name: "Upload unit test report"
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: unittestreport
          path: build/reports/tests/test

  functionalTest:
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - name: "Load compile cache"
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/**
          key: ${{ runner.os }}-compile-${{ github.run_id }}

      - name: "Functional test cache"
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/**
          key: ${{ runner.os }}-funcTest-${{ github.run_id }}

      - name: "Functional tests"
        uses: burrunan/gradle-cache-action@v1
        with:
          arguments: |
            functionalTest
            jacocoFunctionalTestReport

      - name: "Publish functional test results"
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          check_name: "Functional test results"
          files: build/test-results/functionalTest/*.xml

      - name: "Upload functional test report"
        uses: actions/upload-artifact@v2
        if: always()
        with:
         name: functionaltestreport
         path: build/reports/tests/functionalTest

  licenceCheck:
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - name: "Load sources"
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/**
          key: ${{ runner.os }}-sources-${{ github.run_id }}
      - name: "Fossa check license"
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
        run: ${{ github.workspace }}/fossa test

  report:
    runs-on: ubuntu-latest
    needs:
      - unitTest
      - functionalTest
    steps:
      - name: "Load test cache"
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/**
          key: ${{ runner.os }}-test-${{ github.run_id }}

      - name: "Load functional test cache"
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/**
          key: ${{ runner.os }}-functest-${{ github.run_id }}
#      - name: "Generate Report"
#        run: ${{ github.workspace }}/gradlew jacocoMergedReport --no-daemon
#
#      - uses: actions/upload-artifact@v2
#        with:
#          name: code-coverage-report
#          path: build
#
#      - name: "Upload Report"
#        uses: EnricoMi/publish-unit-test-result-action@v1
#        if: always()
#        with:
#          files: build/test-results/**/*.xml

      - name: "Publish Report"
        uses: codecov/codecov-action@v2

  publishSnapshot:
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.ref == 'develop'
    needs:
      - report
      - licenceCheck
    steps:
      - name: "Load compile cache"
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/**
          key: ${{ runner.os }}-compile-${{ github.run_id }}

      - name: "Publish"
        uses: burrunan/gradle-cache-action@v1
        env:
          USERNAME: ${{ github.actor }}
          TOKEN: ${{ github.token }}
        with:
          arguments: |
            publish
